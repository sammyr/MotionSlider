// Datei-Header
#include "MediaViewerPanel.h"
#include <QMimeDatabase>
#include <QFileInfo>
#include <QStyle>
#include <QApplication>
#include <QVBoxLayout>
#include <QToolBar>
#include <QStackedWidget>
#include <QLabel>
#include <QVideoWidget>
#include <QMediaPlayer>
#include <QAudioOutput>
#include <QHBoxLayout>
#include <QAction>
#include <QSlider>
#include <QFileDialog>
#include <QDir>
#include <QPixmap>
#include <QIcon>
#include <QClipboard>
#include <QDateTime>
#include <QJsonDocument>
#include <QJsonObject>
#include <QMessageBox>

MediaViewerPanel::MediaViewerPanel(QWidget* parent) : QWidget(parent), zoomFactor(1.0) {
    setupUI();
}

MediaViewerPanel::~MediaViewerPanel() {
    // Aufräumen, falls nötig
}

void MediaViewerPanel::setupUI() {
    // Layout erstellen - sehr einfach halten
    mainLayout = new QVBoxLayout(this);
    mainLayout->setContentsMargins(0, 5, 0, 0); // 5px Abstand oben
    
    // StackedWidget für Bild/Video
    stackedWidget = new QStackedWidget(this);
    mainLayout->addWidget(stackedWidget);
    
    // Bild-Anzeige
    imageLabel = new QLabel;
    imageLabel->setAlignment(Qt::AlignCenter);
    stackedWidget->addWidget(imageLabel);
    
    // Video-Anzeige
    videoWidget = new QVideoWidget;
    stackedWidget->addWidget(videoWidget);
    
    // MediaPlayer und AudioOutput initialisieren
    mediaPlayer = new QMediaPlayer;
    audioOutput = new QAudioOutput;
    mediaPlayer->setAudioOutput(audioOutput);
    mediaPlayer->setVideoOutput(videoWidget);
    
    // Container für Playback-Slider
    QWidget* sliderContainer = new QWidget(this);
    QHBoxLayout* sliderLayout = new QHBoxLayout(sliderContainer);
    sliderLayout->setContentsMargins(10, 5, 10, 5); // Mehr vertikaler Abstand
    
    // Playback-Position-Slider - größer und besser sichtbar
    positionSlider = new QSlider(Qt::Horizontal, sliderContainer);
    positionSlider->setRange(0, 1000); // Wir verwenden 0-1000 für Genauigkeit
    positionSlider->setMinimumHeight(20); // Höher machen
    positionSlider->setStyleSheet(
        "QSlider::groove:horizontal {
            height: 8px;
            background: #ccc;
            margin: 2px 0;
        }"
        "QSlider::handle:horizontal {
            background: #007bff;
            border: 1px solid #5c5c5c;
            width: 18px;
            margin: -5px 0;
            border-radius: 9px;
        }"
    );
    
    // Bei Klick im Slider sofort zur Position springen
    connect(positionSlider, &QSlider::sliderPressed, this, [this]() {
        // Wenn der Slider gedrückt wird, sofort zur Position springen
        qint64 duration = mediaPlayer->duration();
        if (duration > 0) {
            int value = positionSlider->value();
            mediaPlayer->setPosition(value * duration / 1000);
        }
    });
    
    // Bei Bewegung des Sliders zur Position springen
    connect(positionSlider, &QSlider::sliderMoved, this, [this](int position) {
        // Konvertiere Slider-Position (0-1000) zu Millisekunden
        qint64 duration = mediaPlayer->duration();
        if (duration > 0) {
            mediaPlayer->setPosition(position * duration / 1000);
        }
    });
    
    // Verbinde MediaPlayer-Positionsupdate mit Slider
    connect(mediaPlayer, &QMediaPlayer::positionChanged, this, [this](qint64 position) {
        qint64 duration = mediaPlayer->duration();
        if (duration > 0 && !positionSlider->isSliderDown()) {
            // Konvertiere Position zu Slider-Wert (0-1000)
            positionSlider->setValue(position * 1000 / duration);
        }
    });
    
    // Verbinde Daueränderung mit Slider-Reset
    connect(mediaPlayer, &QMediaPlayer::durationChanged, this, [this](qint64 duration) {
        positionSlider->setValue(0);
    });
    
    sliderLayout->addWidget(positionSlider);
    mainLayout->addWidget(sliderContainer);
    
    // Container für Toolbar (für Zentrierung)
    QWidget* toolbarContainer = new QWidget(this);
    QHBoxLayout* toolbarLayout = new QHBoxLayout(toolbarContainer);
    toolbarLayout->setContentsMargins(0, 0, 0, 0);
    
    // Toolbar zentriert einfügen
    toolbarLayout->addStretch();
    
    // Toolbar erstellen
    mediaToolBar = new QToolBar(this);
    mediaToolBar->setMovable(false);
    mediaToolBar->setFloatable(false);
    toolbarLayout->addWidget(mediaToolBar);
    
    toolbarLayout->addStretch();
    mainLayout->addWidget(toolbarContainer);
}

void MediaViewerPanel::clearToolbar() {
    mediaToolBar->clear();
    if (volumeWidget) {
        delete volumeWidget;
        volumeWidget = nullptr;
    }
}

void MediaViewerPanel::setupVideoToolbar() {
    clearToolbar();
    QStyle* style = QApplication::style();
    // Play/Pause
    playPauseAction = new QAction(QIcon::fromTheme("media-playback-start", style->standardIcon(QStyle::SP_MediaPlay)), "Play/Pause", this);
    connect(playPauseAction, &QAction::triggered, this, &MediaViewerPanel::onPlayPause);
    mediaToolBar->addAction(playPauseAction);
    // Stop
    stopAction = new QAction(QIcon::fromTheme("media-playback-stop", style->standardIcon(QStyle::SP_MediaStop)), "Stop", this);
    connect(stopAction, &QAction::triggered, this, &MediaViewerPanel::onStop);
    mediaToolBar->addAction(stopAction);
    // Zurück
    prevAction = new QAction(QIcon::fromTheme("media-skip-backward", style->standardIcon(QStyle::SP_MediaSkipBackward)), "Zurück", this);
    connect(prevAction, &QAction::triggered, this, &MediaViewerPanel::onPrev);
    mediaToolBar->addAction(prevAction);
    // Vor
    nextAction = new QAction(QIcon::fromTheme("media-skip-forward", style->standardIcon(QStyle::SP_MediaSkipForward)), "Vor", this);
    connect(nextAction, &QAction::triggered, this, &MediaViewerPanel::onNext);
    mediaToolBar->addAction(nextAction);
    // Screenshot
    screenshotAction = new QAction(QIcon::fromTheme("camera-photo", style->standardIcon(QStyle::SP_DialogSaveButton)), "Screenshot", this);
    connect(screenshotAction, &QAction::triggered, this, &MediaViewerPanel::onScreenshot);
    mediaToolBar->addAction(screenshotAction);
    // Lautstärke-Slider
    volumeWidget = new QWidget(this);
    QHBoxLayout* volLayout = new QHBoxLayout(volumeWidget);
    volLayout->setContentsMargins(5, 0, 5, 0);
    QLabel* volIcon = new QLabel(volumeWidget);
    volIcon->setPixmap(QIcon::fromTheme("audio-volume-high", style->standardIcon(QStyle::SP_MediaVolume)).pixmap(20,20));
    volLayout->addWidget(volIcon);
    volumeSlider = new QSlider(Qt::Horizontal, volumeWidget);
    volumeSlider->setRange(0, 100);
    
    // Lade Lautstärke aus der Konfigurationsdatei
    double volume = 0.7; // Standardwert
    QFile configFile("build/program-settings.json");
    if(configFile.open(QIODevice::ReadOnly)) {
        QJsonDocument configDoc = QJsonDocument::fromJson(configFile.readAll());
        QJsonObject configObj = configDoc.object();
        
        if(configObj.contains("volume"))
            volume = configObj["volume"].toDouble();
            
        configFile.close();
    }
    
    // Setze Lautstärke und Slider-Position
    audioOutput->setVolume(volume);
    volumeSlider->setValue(static_cast<int>(volume * 100));
    
    // Verbinde Slider mit Lautstärkeänderung
    connect(volumeSlider, &QSlider::valueChanged, this, &MediaViewerPanel::onVolumeChanged);
    
    // Verbessere das Aussehen des Sliders
    volumeSlider->setStyleSheet(
        "QSlider::groove:horizontal {
            height: 6px;
            background: #ccc;
            margin: 2px 0;
        }"
        "QSlider::handle:horizontal {
            background: #007bff;
            border: 1px solid #5c5c5c;
            width: 14px;
            margin: -4px 0;
            border-radius: 7px;
        }"
    );
    
    volLayout->addWidget(volumeSlider);
    volumeWidget->setFixedWidth(140);
    mediaToolBar->addWidget(volumeWidget);
    // Play/Pause-Icon synchronisieren
    connect(mediaPlayer, &QMediaPlayer::playbackStateChanged, this, &MediaViewerPanel::onMediaStateChanged);
    onMediaStateChanged(mediaPlayer->playbackState());
}

void MediaViewerPanel::setupImageToolbar() {
    clearToolbar();
    QStyle* style = QApplication::style();
    copyImageAction = new QAction(QIcon::fromTheme("edit-copy", style->standardIcon(QStyle::SP_DialogOpenButton)), "Bild kopieren", this);
    connect(copyImageAction, &QAction::triggered, this, &MediaViewerPanel::onCopyImage);
    mediaToolBar->addAction(copyImageAction);
}

// --- Slots ---
void MediaViewerPanel::onPlayPause() {
    if (mediaPlayer->playbackState() == QMediaPlayer::PlayingState)
        mediaPlayer->pause();
    else
        mediaPlayer->play();
}
void MediaViewerPanel::onStop() {
    mediaPlayer->stop();
}
void MediaViewerPanel::onPrev() {
    // Ein Frame zurückspringen (ca. 33ms für 30fps)
    qint64 currentPosition = mediaPlayer->position();
    qint64 newPosition = qMax(currentPosition - 33, (qint64)0);
    mediaPlayer->setPosition(newPosition);
}

void MediaViewerPanel::onNext() {
    // Ein Frame vorspringen (ca. 33ms für 30fps)
    qint64 currentPosition = mediaPlayer->position();
    qint64 duration = mediaPlayer->duration();
    qint64 newPosition = qMin(currentPosition + 33, duration);
    mediaPlayer->setPosition(newPosition);
}

void MediaViewerPanel::onScreenshot() {
    // Lade Screenshot-Pfad aus der Konfigurationsdatei
    QString screenshotsPath = "screenshots";
    
    // Versuche, den Pfad aus der Konfigurationsdatei zu laden
    QFile configFile("build/program-settings.json");
    if(configFile.open(QIODevice::ReadOnly)) {
        QJsonDocument configDoc = QJsonDocument::fromJson(configFile.readAll());
        QJsonObject configObj = configDoc.object();
        
        if(configObj.contains("screenshotsPath"))
            screenshotsPath = configObj["screenshotsPath"].toString();
            
        configFile.close();
    }
    
    // Stelle sicher, dass der Pfad existiert
    QDir dir(screenshotsPath);
    if (!dir.exists()) {
        dir.mkpath(".");
    }
    
    // Erstelle einen eindeutigen Dateinamen mit Zeitstempel
    QString timestamp = QDateTime::currentDateTime().toString("yyyyMMdd_hhmmss");
    QString filename;
    
    if (!currentFilePath.isEmpty()) {
        QFileInfo fileInfo(currentFilePath);
        filename = fileInfo.baseName() + "_" + timestamp + ".png";
    } else {
        filename = "screenshot_" + timestamp + ".png";
    }
    
    QString fullPath = screenshotsPath + "/" + filename;
    
    // Erstelle Screenshot vom aktuellen Frame
    if (stackedWidget->currentIndex() == 0) {
        // Bild-Modus
        if (!originalPixmap.isNull()) {
            originalPixmap.save(fullPath, "PNG");
            QMessageBox::information(this, "Screenshot", "Bild gespeichert als:\n" + fullPath);
        }
    } else {
        // Video-Modus
        QPixmap screenshot = videoWidget->grab();
        if (!screenshot.isNull()) {
            screenshot.save(fullPath, "PNG");
            QMessageBox::information(this, "Screenshot", "Screenshot gespeichert als:\n" + fullPath);
        }
    }
}

void MediaViewerPanel::onCopyImage() {
    if (!originalPixmap.isNull()) {
        QApplication::clipboard()->setPixmap(originalPixmap);
    }
}
void MediaViewerPanel::onVolumeChanged(int value) {
    double volume = value / 100.0;
    audioOutput->setVolume(volume);
    
    // Speichere die Lautstärke in der Konfigurationsdatei
    QFile configFile("build/program-settings.json");
    if(configFile.open(QIODevice::ReadOnly)) {
        QJsonDocument configDoc = QJsonDocument::fromJson(configFile.readAll());
        QJsonObject configObj = configDoc.object();
        
        // Aktualisiere den Lautstärkewert
        configObj["volume"] = volume;
        
        configFile.close();
        
        // Schreibe die aktualisierte Konfiguration zurück
        if(configFile.open(QIODevice::WriteOnly)) {
            configFile.write(configDoc.toJson());
            configFile.close();
        }
    }
}
void MediaViewerPanel::onMediaStateChanged(QMediaPlayer::PlaybackState state) {
    QStyle* style = QApplication::style();
    if (state == QMediaPlayer::PlayingState) {
        playPauseAction->setIcon(QIcon::fromTheme("media-playback-pause", style->standardIcon(QStyle::SP_MediaPause)));
    } else {
        playPauseAction->setIcon(QIcon::fromTheme("media-playback-start", style->standardIcon(QStyle::SP_MediaPlay)));
    }
}

void MediaViewerPanel::loadFile(const QString& filePath) {
    currentFilePath = filePath;
    QFileInfo fileInfo(filePath);
    if (!fileInfo.exists()) return;
    
    QMimeDatabase db;
    QMimeType type = db.mimeTypeForFile(filePath);
    
    if (type.name().startsWith("image/")) {
        loadImage(filePath);
        setupImageToolbar();
    } else if (type.name().startsWith("video/") || 
              filePath.endsWith(".mp4", Qt::CaseInsensitive) ||
              filePath.endsWith(".avi", Qt::CaseInsensitive) ||
              filePath.endsWith(".mkv", Qt::CaseInsensitive) ||
              filePath.endsWith(".mov", Qt::CaseInsensitive) ||
              filePath.endsWith(".flv", Qt::CaseInsensitive) ||
              filePath.endsWith(".wmv", Qt::CaseInsensitive)) {
        loadVideo(filePath);
        setupVideoToolbar();
    }
}

void MediaViewerPanel::loadImage(const QString& imagePath) {
    // Video stoppen falls läuft
    mediaPlayer->stop();
    videoWidget->hide();
    
    // Bild laden
    originalPixmap.load(imagePath);
    if (originalPixmap.isNull()) return;
    
    // Bild anzeigen
    imageLabel->setPixmap(originalPixmap.scaled(imageLabel->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
    imageLabel->show();
    stackedWidget->setCurrentIndex(0);
    // Zoom zurücksetzen
    zoomFactor = 1.0;
}

void MediaViewerPanel::loadVideo(const QString& videoPath) {
    // Bild ausblenden
    imageLabel->hide();
    
    // Video laden und abspielen
    mediaPlayer->setSource(QUrl::fromLocalFile(videoPath));
    videoWidget->show();
    stackedWidget->setCurrentIndex(1);
    mediaPlayer->play();
}

void MediaViewerPanel::zoomImage(double factor) {
    zoomFactor = factor;
    if (originalPixmap.isNull()) return;
    
    // Skalierte Größe berechnen
    QSize scaledSize = originalPixmap.size() * zoomFactor;
    
    // Bild neu skalieren und anzeigen
    imageLabel->setPixmap(originalPixmap.scaled(scaledSize, Qt::KeepAspectRatio, Qt::SmoothTransformation));
}
